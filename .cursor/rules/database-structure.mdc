---
description: 
globs: 
alwaysApply: false
---
-- ENUMS
CREATE TYPE user_role AS ENUM ('superadmin', 'admin', 'marketing', 'client');
CREATE TYPE gender_type AS ENUM ('male', 'female', 'other', 'prefer_not_to_say');
CREATE TYPE product_status AS ENUM ('in_stock', 'out_of_stock', 'running_low');
CREATE TYPE order_status AS ENUM ('in_cart', 'placed', 'confirmed', 'processed', 'pickup', 'delivered');
CREATE TYPE media_folder_type AS ENUM ('category', 'brand', 'product', 'avatar', 'general');

-- USERS
CREATE TABLE "user" (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  auth_user_id UUID NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
  first_name VARCHAR(100),
  last_name VARCHAR(100),
  email VARCHAR(255) UNIQUE, -- Added email as it's synced from auth.users
  phone_number VARCHAR(20),
  role user_role DEFAULT 'client',
  gender gender_type,
  avatar_image_id UUID REFERENCES media_item(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- ADDRESS
CREATE TABLE address (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES "user"(id) ON DELETE CASCADE,
  street VARCHAR(255),
  street_number VARCHAR(20),
  apartment_suite VARCHAR(50), -- Added
  city VARCHAR(100),
  province VARCHAR(100),
  postal_code VARCHAR(20),
  country VARCHAR(100), -- Added
  phone_number VARCHAR(20), -- Consider if this should be on user table primarily
  is_default BOOLEAN DEFAULT FALSE, -- Added
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- MEDIA FOLDER
CREATE TABLE media_folder (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(100) NOT NULL,
  folder_type media_folder_type NOT NULL,
  parent_folder_id UUID REFERENCES media_folder(id) ON DELETE CASCADE, -- For subfolders
  created_by UUID REFERENCES "user"(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE,
  UNIQUE (name, parent_folder_id, folder_type) -- Ensure unique folder names within a parent and type
);

-- MEDIA ITEM
CREATE TABLE media_item (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  folder_id UUID REFERENCES media_folder(id) ON DELETE SET NULL, -- Can be null for root items if allowed
  url TEXT NOT NULL,
  name VARCHAR(255) NOT NULL,
  tags TEXT[]
  alt_text TEXT,
  created_by UUID REFERENCES "user"(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
);

-- CATEGORY
CREATE TABLE category (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT, -- Added
  image_id UUID REFERENCES media_item(id) ON DELETE SET NULL,
  created_by UUID REFERENCES "user"(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- BRAND
CREATE TABLE brand (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT, -- Added
  website_url TEXT, -- Added
  image_id UUID REFERENCES media_item(id) ON DELETE SET NULL,
  created_by UUID REFERENCES "user"(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- PRICE GROUP (Consider if this is still needed or if price is directly on product)
CREATE TABLE price_group (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(100) NOT NULL UNIQUE,
  description TEXT, -- Added
  created_by UUID REFERENCES "user"(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- PRODUCT
CREATE TABLE product (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL UNIQUE,
  sku VARCHAR(100) UNIQUE, -- Added Stock Keeping Unit
  description TEXT,
  stock INTEGER DEFAULT 0,
  low_stock_threshold INTEGER DEFAULT 5, -- Added
  price NUMERIC(10,2) NOT NULL, -- Price directly on product
  compare_at_price NUMERIC(10,2), -- For sales/discounts visuals
  -- price_group_id UUID REFERENCES price_group(id) ON DELETE SET NULL, -- Removed as per schema, price on product
  brand_id UUID REFERENCES brand(id) ON DELETE SET NULL,
  category_id UUID REFERENCES category(id) ON DELETE SET NULL,
  status product_status DEFAULT 'in_stock',
  is_featured BOOLEAN DEFAULT FALSE, -- Added
  tags TEXT[], -- Added for search/filtering
  created_by UUID REFERENCES "user"(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- PRODUCT_MEDIA (Junction table for Product and MediaItem)
CREATE TABLE product_media (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), -- Own ID for the relation
  product_id UUID NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  media_item_id UUID NOT NULL REFERENCES media_item(id) ON DELETE CASCADE,
  display_order INTEGER DEFAULT 0, -- For ordering images
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (product_id, media_item_id) -- Prevent duplicate media for the same product
);

-- DISCOUNTS
CREATE TABLE discount (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name VARCHAR(100) NOT NULL,
  description TEXT,
  code VARCHAR(50) UNIQUE, -- For coupon codes
  discount_type TEXT NOT NULL CHECK (discount_type IN ('percentage', 'fixed_amount')),
  value NUMERIC(10,2) NOT NULL, -- Percentage (e.g., 10 for 10%) or fixed amount
  minimum_purchase_amount NUMERIC(10,2),
  start_date TIMESTAMP WITH TIME ZONE,
  end_date TIMESTAMP WITH TIME ZONE,
  usage_limit INTEGER,
  is_active BOOLEAN DEFAULT TRUE,
  created_by UUID REFERENCES "user"(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- Junction tables for discount applicability
CREATE TABLE discount_brand (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  discount_id UUID NOT NULL REFERENCES discount(id) ON DELETE CASCADE,
  brand_id UUID NOT NULL REFERENCES brand(id) ON DELETE CASCADE,
  UNIQUE (discount_id, brand_id)
);

CREATE TABLE discount_category (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  discount_id UUID NOT NULL REFERENCES discount(id) ON DELETE CASCADE,
  category_id UUID NOT NULL REFERENCES category(id) ON DELETE CASCADE,
  UNIQUE (discount_id, category_id)
);

CREATE TABLE discount_product (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  discount_id UUID NOT NULL REFERENCES discount(id) ON DELETE CASCADE,
  product_id UUID NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  UNIQUE (discount_id, product_id)
);

-- REVIEW
CREATE TABLE review (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES "user"(id) ON DELETE SET NULL, -- User who wrote review
  product_id UUID REFERENCES product(id) ON DELETE CASCADE, -- Review for a product
  -- brand_id UUID REFERENCES brand(id), -- Removed, review is product-specific
  rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
  title VARCHAR(255), -- Added
  comment TEXT,
  is_approved BOOLEAN DEFAULT TRUE, -- For moderation
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE, -- Allow users to update their reviews
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- FAVORITE (User's favorite products)
CREATE TABLE favorite (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
  product_id UUID NOT NULL REFERENCES product(id) ON DELETE CASCADE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  UNIQUE (user_id, product_id) -- A user can favorite a product only once
);

-- ORDER
CREATE TABLE "order" (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  user_id UUID REFERENCES "user"(id) ON DELETE SET NULL, -- Can be null if guest checkout is ever implemented
  status order_status DEFAULT 'in_cart',
  total_amount NUMERIC(10,2) DEFAULT 0.00,
  total_items INTEGER DEFAULT 0,
  shipping_address_id UUID REFERENCES address(id) ON DELETE SET NULL,
  billing_address_id UUID REFERENCES address(id) ON DELETE SET NULL, -- Added
  shipping_method VARCHAR(100), -- e.g., 'Standard', 'Express'
  shipping_cost NUMERIC(10,2) DEFAULT 0.00,
  tracking_number VARCHAR(100),
  notes TEXT, -- Customer notes
  store_pickup BOOLEAN DEFAULT FALSE, -- Added from previous schema
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP WITH TIME ZONE,
  deleted_at TIMESTAMP WITH TIME ZONE
);

-- ORDER_ITEM
CREATE TABLE order_item (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  order_id UUID NOT NULL REFERENCES "order"(id) ON DELETE CASCADE,
  product_id UUID NOT NULL REFERENCES product(id) ON DELETE SET NULL, -- SET NULL if product is deleted but order remains
  quantity INTEGER NOT NULL CHECK (quantity > 0),
  price_at_purchase NUMERIC(10,2) NOT NULL, -- Price of the product when the order was placed
  created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  -- deleted_at TIMESTAMP WITH TIME ZONE -- Order items are usually not soft-deleted; they are part of the immutable order
  UNIQUE(order_id, product_id) -- Ensure a product appears only once per order, quantity handles multiples
);


-- TRIGGER TO SYNC auth.users WITH public.user
-- Function to create a public user profile when a new auth user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER -- Must be SECURITY DEFINER to access auth.users and write to public.user
AS $$
BEGIN
  -- Insert into public.user table, mapping auth.users fields
  -- The 'id' for public.user will be generated by its DEFAULT uuid_generate_v4()
  INSERT INTO public.user (auth_user_id, email, first_name, last_name, role)
  VALUES (
    NEW.id,                         -- This is the auth.users.id
    NEW.email,                      -- User's email
    NEW.raw_user_meta_data->>'first_name', -- Attempt to get first_name from metadata
    NEW.raw_user_meta_data->>'last_name',  -- Attempt to get last_name from metadata
    'client'                        -- Default role
  )
  ON CONFLICT (auth_user_id) DO NOTHING; -- Avoid errors if trigger fires multiple times for the same user
  RETURN NEW;
END;
$$;

-- Trigger to call the function after a new user is inserted into auth.users
-- Drop the trigger first if it exists to ensure the command is idempotent
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Enable UUID generation if not already enabled
-- CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- This should be run once by a superuser

-- RLS (Row Level Security) POLICIES

-- Helper function to get the public.user.id from auth.uid()
CREATE OR REPLACE FUNCTION public.get_my_user_id()
RETURNS UUID
LANGUAGE sql
STABLE
AS $$
  SELECT id FROM public.user WHERE auth_user_id = auth.uid() AND deleted_at IS NULL;
$$;

-- Helper function to get the role of the current authenticated user
CREATE OR REPLACE FUNCTION public.current_user_role()
RETURNS user_role
LANGUAGE sql
STABLE
AS $$
  SELECT role FROM public.user WHERE auth_user_id = auth.uid() AND deleted_at IS NULL;
$$;

-- USER TABLE RLS
ALTER TABLE public."user" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."user" FORCE ROW LEVEL SECURITY; -- Ensures RLS is always applied, even for table owners

CREATE POLICY "Allow superadmin full access to users" ON public."user"
  FOR ALL USING (public.current_user_role() = 'superadmin');

CREATE POLICY "Allow admin to view all users" ON public."user"
  FOR SELECT USING (public.current_user_role() IN ('superadmin', 'admin'));

CREATE POLICY "Allow admin to update limited fields on users" ON public."user"
  FOR UPDATE USING (public.current_user_role() IN ('superadmin', 'admin'))
  WITH CHECK (public.current_user_role() IN ('superadmin', 'admin')); -- For columns like 'role', 'status'

CREATE POLICY "Users can view their own profile" ON public."user"
  FOR SELECT USING (auth_user_id = auth.uid());

CREATE POLICY "Users can update their own profile" ON public."user"
  FOR UPDATE USING (auth_user_id = auth.uid())
  WITH CHECK (auth_user_id = auth.uid() AND role = (SELECT role FROM public.user WHERE id = public.get_my_user_id())); -- Prevent user from changing their own role

-- ADDRESS TABLE RLS
ALTER TABLE public.address ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.address FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin full access to addresses" ON public.address FOR ALL USING (public.current_user_role() = 'superadmin');
CREATE POLICY "Allow admin to manage addresses" ON public.address FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Users can manage their own addresses" ON public.address FOR ALL USING (user_id = public.get_my_user_id());

-- MEDIA FOLDER RLS
ALTER TABLE public.media_folder ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.media_folder FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage all media folders" ON public.media_folder FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow authenticated users to view media folders" ON public.media_folder FOR SELECT USING (auth.role() = 'authenticated');

-- MEDIA ITEM RLS
ALTER TABLE public.media_item ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.media_item FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage all media items" ON public.media_item FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow authenticated users to view media items" ON public.media_item FOR SELECT USING (auth.role() = 'authenticated');
-- Consider policy for users to manage their own uploads if applicable:
-- CREATE POLICY "Users can manage their own media items" ON public.media_item FOR ALL USING (uploaded_by = public.get_my_user_id());

-- CATEGORY TABLE RLS
ALTER TABLE public.category ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.category FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage categories" ON public.category FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow any authenticated user to view categories" ON public.category FOR SELECT USING (auth.role() = 'authenticated');

-- BRAND TABLE RLS
ALTER TABLE public.brand ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.brand FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage brands" ON public.brand FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow any authenticated user to view brands" ON public.brand FOR SELECT USING (auth.role() = 'authenticated');

-- PRICE GROUP RLS (If used)
ALTER TABLE public.price_group ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.price_group FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage price groups" ON public.price_group FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow any authenticated user to view price groups" ON public.price_group FOR SELECT USING (auth.role() = 'authenticated');

-- PRODUCT TABLE RLS
ALTER TABLE public.product ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.product FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage products" ON public.product FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow marketing to read products" ON public.product FOR SELECT USING (public.current_user_role() = 'marketing');
CREATE POLICY "Allow any user (incl. anon) to view active products" ON public.product FOR SELECT USING (status = 'in_stock' AND deleted_at IS NULL);

-- PRODUCT MEDIA RLS
ALTER TABLE public.product_media ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.product_media FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage product media" ON public.product_media FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow any user to view product media (relies on product visibility)" ON public.product_media FOR SELECT USING (auth.role() IN ('authenticated', 'anon'));

-- DISCOUNT TABLE RLS (and its junction tables)
ALTER TABLE public.discount ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.discount FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage discounts" ON public.discount FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow marketing to view active discounts" ON public.discount FOR SELECT USING (public.current_user_role() = 'marketing' AND is_active = TRUE AND deleted_at IS NULL AND (end_date IS NULL OR end_date > now()));
CREATE POLICY "Allow authenticated users to view active, non-expired discounts" ON public.discount FOR SELECT USING (is_active = TRUE AND deleted_at IS NULL AND (end_date IS NULL OR end_date > now()));

ALTER TABLE public.discount_brand ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.discount_brand FORCE ROW LEVEL SECURITY;
CREATE POLICY "Discount brand relations visibility based on discount visibility" ON public.discount_brand FOR SELECT USING (EXISTS (SELECT 1 FROM discount WHERE id = discount_id)); -- Relies on discount RLS
CREATE POLICY "Allow superadmin/admin to manage discount_brand" ON public.discount_brand FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));

ALTER TABLE public.discount_category ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.discount_category FORCE ROW LEVEL SECURITY;
CREATE POLICY "Discount category relations visibility based on discount visibility" ON public.discount_category FOR SELECT USING (EXISTS (SELECT 1 FROM discount WHERE id = discount_id));
CREATE POLICY "Allow superadmin/admin to manage discount_category" ON public.discount_category FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));

ALTER TABLE public.discount_product ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.discount_product FORCE ROW LEVEL SECURITY;
CREATE POLICY "Discount product relations visibility based on discount visibility" ON public.discount_product FOR SELECT USING (EXISTS (SELECT 1 FROM discount WHERE id = discount_id));
CREATE POLICY "Allow superadmin/admin to manage discount_product" ON public.discount_product FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));

-- REVIEW TABLE RLS
ALTER TABLE public.review ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.review FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage all reviews" ON public.review FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Users can create reviews" ON public.review FOR INSERT WITH CHECK (user_id = public.get_my_user_id() AND deleted_at IS NULL);
CREATE POLICY "Users can view approved reviews" ON public.review FOR SELECT USING (is_approved = TRUE AND deleted_at IS NULL);
CREATE POLICY "Users can update their own reviews" ON public.review FOR UPDATE USING (user_id = public.get_my_user_id() AND deleted_at IS NULL) WITH CHECK (user_id = public.get_my_user_id());
CREATE POLICY "Users can delete their own reviews (soft delete)" ON public.review FOR DELETE USING (user_id = public.get_my_user_id()); -- Note: DELETE operations with RLS usually become soft-deletes via triggers or app logic.

-- FAVORITE TABLE RLS
ALTER TABLE public.favorite ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.favorite FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin full access to favorites" ON public.favorite FOR ALL USING (public.current_user_role() = 'superadmin');
CREATE POLICY "Users can manage their own favorites" ON public.favorite FOR ALL USING (user_id = public.get_my_user_id());

-- ORDER TABLE RLS
ALTER TABLE public."order" ENABLE ROW LEVEL SECURITY;
ALTER TABLE public."order" FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage all orders" ON public."order" FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Allow marketing to view orders" ON public."order" FOR SELECT USING (public.current_user_role() = 'marketing');
CREATE POLICY "Users can manage their own orders" ON public."order" FOR ALL USING (user_id = public.get_my_user_id());
CREATE POLICY "Users can only update their orders if in 'in_cart' status" ON public."order"
  FOR UPDATE USING (user_id = public.get_my_user_id() AND status = 'in_cart')
  WITH CHECK (user_id = public.get_my_user_id() AND status = 'in_cart');

-- ORDER ITEM TABLE RLS
ALTER TABLE public.order_item ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.order_item FORCE ROW LEVEL SECURITY;
CREATE POLICY "Allow superadmin/admin to manage all order items" ON public.order_item FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
CREATE POLICY "Users can view their own order items (via order)" ON public.order_item
  FOR SELECT USING (EXISTS (
    SELECT 1 FROM "order" o
    WHERE o.id = order_id AND o.user_id = public.get_my_user_id()
  ));
CREATE POLICY "Users can manage their own order items if order is 'in_cart' (via order)" ON public.order_item
  FOR ALL USING (EXISTS (
    SELECT 1 FROM "order" o
    WHERE o.id = order_id AND o.user_id = public.get_my_user_id() AND o.status = 'in_cart'
  ));
