---
description: 
globs: 
alwaysApply: false
---
# Guía de Interacción con la Base de Datos (Supabase)

## 1. Configuración Inicial

* **Instalación**:

  ```bash
  npm install @supabase/supabase-js
  ```

* **Cliente Supabase (Client-side)**:
  Crea `src/utils/supabase/client.ts`:
  ```ts
  import { createBrowserClient } from '@supabase/ssr'

  export function createClient() {
    return createBrowserClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    )
  }
  ```

* **Cliente Supabase (Server-side - Route Handlers, Server Actions)**:
  Crea `src/utils/supabase/server.ts`:
  ```ts
  import { createServerClient, type CookieOptions } from '@supabase/ssr'
  import { cookies } from 'next/headers'

  export function createClient() {
    const cookieStore = cookies()

    return createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return cookieStore.get(name)?.value
          },
          set(name: string, value: string, options: CookieOptions) {
            try {
              cookieStore.set({ name, value, ...options })
            } catch (error) {
              // The `set` method was Called from a Server Component.
              // This can be ignored if you have middleware refreshing
              // user sessions.
            }
          },
          remove(name: string, options: CookieOptions) {
            try {
              cookieStore.delete({ name, ...options })
            } catch (error) {
              // The `delete` method was Called from a Server Component.
              // This can be ignored if you have middleware refreshing
              // user sessions.
            }
          }
        }
      }
    )
  }
  ```

* **Variables de Entorno (`.env.local`)**:
  ```
  NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
  NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
  ```

* **Autenticación**: Supabase maneja sesiones a través de cookies (`@supabase/ssr`). La información del usuario (`auth.users`) se sincroniza automáticamente a la tabla `public.user` mediante un trigger en la base de datos (ver `handle_new_user` en `database-structure.mdc`).

---

## 2. Convenciones Generales

* **Nombres de Tablas**: En singular y minúsculas (ej: `user`, `product`, `order`).
* **IDs**: Todas las tablas usan `id UUID PRIMARY KEY DEFAULT uuid_generate_v4()`. En TypeScript, estos IDs son strings.
* **Timestamps y Soft-Delete**:
    * `created_at` (TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP)
    * `updated_at` (TIMESTAMP WITH TIME ZONE)
    * `deleted_at` (TIMESTAMP WITH TIME ZONE | NULL)
* **Filtros Básicos**: Siempre incluir `.is('deleted_at', null)` para omitir registros borrados lógicamente, excepto cuando se listen o restauren elementos borrados.
* **RLS (Row Level Security)**: Habilitada en todas las tablas. Las políticas definen el acceso basado en roles (`current_user_role()`) y propiedad (`get_my_user_id()`).
* **Minimizar SQL Crudo**: Priorizar el uso de la API de Supabase JS (`.select()`, `.insert()`, `.update()`, `.delete()`, `.eq()`, `.filter()`, etc.) sobre `.rpc()` con SQL crudo, a menos que sea para funciones complejas o performance crítica.
* **Manejo de Errores**: Siempre verificar y manejar el objeto `error` devuelto por las llamadas a Supabase. Considerar el uso de `throw error` en funciones de servicio para que los componentes puedan manejarlo.

---

## 3. Políticas de Acceso (RLS)

RLS está habilitado en todas las tablas. Las políticas están definidas en `database-structure.mdc` y generalmente siguen estos patrones:

1.  **Activación de RLS y `FORCE ROW LEVEL SECURITY`**:
    ```sql
    ALTER TABLE public.product ENABLE ROW LEVEL SECURITY;
    ALTER TABLE public.product FORCE ROW LEVEL SECURITY;
    ```
2.  **Funciones Helper para RLS**:
    * `public.get_my_user_id() RETURNS UUID`: Obtiene el `id` de la tabla `public.user` para el usuario autenticado.
    * `public.current_user_role() RETURNS user_role`: Obtiene el `role` del usuario autenticado desde `public.user`.
3.  **Ejemplos de Políticas Comunes**:
    * **Superadmin**: Acceso total.
      ```sql
      CREATE POLICY "Allow superadmin full access to products" ON public.product
        FOR ALL USING (public.current_user_role() = 'superadmin');
      ```
    * **Admin**: Gestionar (CRUD completo) entidades.
      ```sql
      CREATE POLICY "Allow admin to manage products" ON public.product
        FOR ALL USING (public.current_user_role() IN ('superadmin', 'admin'));
      ```
    * **Marketing**: Acceso de solo lectura a ciertas tablas.
      ```sql
      CREATE POLICY "Allow marketing to read products" ON public.product
        FOR SELECT USING (public.current_user_role() = 'marketing');
      ```
    * **Client/User**: Gestionar sus propios datos, ver datos públicos.
      ```sql
      CREATE POLICY "Users can manage their own addresses" ON public.address
        FOR ALL USING (user_id = public.get_my_user_id());

      CREATE POLICY "Allow any user (incl. anon) to view active products" ON public.product
        FOR SELECT USING (status = 'in_stock' AND deleted_at IS NULL);
      ```

---

## 4. Operaciones CRUD con Supabase (Ejemplos con UUIDs)

### 4.1 Lectura (SELECT)

* **Listar productos activos (cliente)**:
  ```typescript
  // En un componente o hook del lado del cliente
  import { createClient } from '@/utils/supabase/client';
  const supabase = createClient();

  const { data: products, error } = await supabase
    .from('product')
    .select('id, name, price, status, slug, product_media(media_item(url, alt_text))') // Ejemplo de join
    .eq('status', 'in_stock')
    .is('deleted_at', null);
  ```

* **Obtener detalles de un producto (servidor o cliente)**:
  ```typescript
  // productId es un string (UUID)
  async function getProductDetails(productId: string) {
    const supabase = createClient(); // Usar createClient() de server o client según contexto
    const { data: product, error } = await supabase
      .from('product')
      .select('*, category:category_id(name), brand:brand_id(name), product_media(media_item(url, alt_text)) ')
      .eq('id', productId)
      .is('deleted_at', null)
      .single();
    if (error) throw error;
    return product;
  }
  ```

### 4.2 Creación (INSERT)

* **Crear un nuevo item (ej: categoría - Lado del Servidor)**:
  Requiere que el usuario tenga el rol adecuado (`admin` o `superadmin`).
  ```typescript
  // En una Server Action (src/actions/category-actions.ts)
  import { createClient } from '@/utils/supabase/server';
  import type { ICategory } from '@/interfaces/category';

  export async function createCategory(formData: FormData) {
    const supabase = createClient();
    const { data: { user: authUser } } = await supabase.auth.getUser();
    if (!authUser) throw new Error("User not authenticated");

    // Validación de rol (ejemplo, podría ser más robusta)
    const { data: userProfile } = await supabase.from('user').select('role').eq('auth_user_id', authUser.id).single();
    if (!userProfile || !['admin', 'superadmin'].includes(userProfile.role)) {
      throw new Error("Unauthorized");
    }

    const rawData = {
      name: formData.get('name') as string,
      description: formData.get('description') as string,
      // image_id sería un UUID de un media_item existente
      image_id: formData.get('image_id') as string || null,
      created_by: userProfile.id // Asumiendo que userProfile.id es el UUID de public.user
    };

    const { data: newCategory, error } = await supabase
      .from('category')
      .insert(rawData)
      .select('id, name, description, image_id')
      .single<Pick<ICategory, 'id' | 'name' | 'description' | 'image_id'> >();

    if (error) {
      console.error('Error creating category:', error);
      throw error;
    }
    return newCategory;
  }
  ```

### 4.3 Actualización (UPDATE)

* **Actualizar perfil de usuario (cliente o servidor)**:
  RLS permite al usuario actualizar solo su propio perfil.
  ```typescript
  // userId es el id (UUID) de la tabla public.user
  async function updateUserProfile(userId: string, updates: { first_name?: string; last_name?: string; phone_number?: string }) {
    const supabase = createClient(); // Usar createClient() de server o client según contexto
    const { data, error } = await supabase
      .from('user')
      .update({ ...updates, updated_at: new Date().toISOString() })
      .eq('id', userId) // Referencia al ID de la tabla 'user', no auth_user_id directamente aquí para RLS
      .is('deleted_at', null)
      .select('id, first_name, last_name, email, phone_number, role')
      .single();

    if (error) throw error;
    return data;
  }
  ```

### 4.4 Borrado Lógico (Soft-Delete)

* **Soft-delete de una review (cliente o servidor)**:
  RLS puede permitir al usuario borrar su propia review, o a un admin borrar cualquiera.
  ```typescript
  // reviewId es un string (UUID)
  async function softDeleteReview(reviewId: string) {
    const supabase = createClient();
    const { error } = await supabase
      .from('review')
      .update({ deleted_at: new Date().toISOString() })
      .eq('id', reviewId)
      .is('deleted_at', null);

    if (error) throw error;
    // No data is typically returned on soft delete, just check error
  }
  ```

### 4.5 Restaurar un item borrado lógicamente (ej: producto - Lado del Servidor)
  ```typescript
  // productId es un string (UUID)
  // Necesita rol de admin/superadmin
  export async function restoreProduct(productId: string) {
    const supabase = createClient(); // Server client
    // ... (Auth y validación de rol como en el ejemplo de creación)
    const { error } = await supabase
      .from('product')
      .update({ deleted_at: null, updated_at: new Date().toISOString() })
      .eq('id', productId)
      .not('deleted_at', 'is', null); // Asegurarse que estaba borrado

    if (error) throw error;
  }
  ```

---

## 5. Patrones Avanzados

### 5.1 Paginación

```typescript
const PAGE_SIZE = 10;
async function getPaginatedProducts(page: number = 1) {
  const supabase = createClient();
  const from = (page - 1) * PAGE_SIZE;
  const to = from + PAGE_SIZE - 1;

  const { data, error, count } = await supabase
    .from('product')
    .select('id, name, slug, price', { count: 'exact' }) // count: 'exact' para obtener el total
    .is('deleted_at', null)
    .eq('status', 'in_stock')
    .order('created_at', { ascending: false })
    .range(from, to);

  if (error) throw error;
  return { data, count };
}
```

### 5.2 Búsqueda Full-Text (Ejemplo simple)

Supone que tienes una columna `fts` (tsvector) en tu tabla `product` o usas `to_tsvector`.
```typescript
async function searchProducts(searchTerm: string) {
  const supabase = createClient();
  const { data, error } = await supabase
    .from('product')
    .select('id, name, slug, description')
    .textSearch('name', searchTerm, { type: 'plain' }) // o 'websearch' o 'phrase'
    // Si tienes una columna tsvector: .textSearch('fts_column', searchTerm)
    .is('deleted_at', null)
    .limit(20);

  if (error) throw error;
  return data;
}
```

### 5.3 Llamar a Funciones de Base de Datos (RPC)

Ejemplo: Si tienes una función `get_product_final_price(p_product_id UUID)` en tu DB.
```typescript
async function getFinalPrice(productId: string) {
  const supabase = createClient();
  const { data, error } = await supabase
    .rpc('get_product_final_price', { p_product_id: productId });

  if (error) throw error;
  return data; // El tipo de 'data' dependerá de lo que retorne tu función SQL
}
```

---

## 6. Buenas Prácticas Adicionales

* **Transacciones**: Para operaciones que involucran múltiples inserciones/actualizaciones que deben ser atómicas (o todas o ninguna), considera usar funciones de base de datos (RPC) que ejecuten todas las operaciones dentro de una transacción SQL (`BEGIN; ... COMMIT;/ROLLBACK;`). La API JS de Supabase no ofrece transacciones directas a nivel de cliente para múltiples tablas.
* **Índices**: Asegúrate de que las columnas frecuentemente usadas en filtros (`WHERE` clauses), joins, y ordenamiento (`ORDER BY`) tengan índices. Esto incluye `deleted_at`, `status`, IDs de FK, y columnas usadas en búsquedas de texto. Revisa `database-structure.mdc` para los índices ya definidos.
* **Seguridad de Claves API**: `NEXT_PUBLIC_SUPABASE_ANON_KEY` es pública por diseño para el lado del cliente. La seguridad se implementa principalmente a través de RLS. La `SERVICE_ROLE_KEY` (si la usas, no recomendada para el frontend o server actions directas) debe mantenerse secreta y usarse solo en entornos seguros de backend (ej: scripts de confianza, migraciones).
* **Actualización de Middleware**: Asegúrate que tu `middleware.ts` (si usas `@supabase/ssr`) esté configurado para refrescar la sesión del usuario en cada petición, como se indica en la documentación de Supabase.
  ```typescript
  // src/middleware.ts
  import { createServerClient, type CookieOptions } from '@supabase/ssr'
  import { NextResponse, type NextRequest } from 'next/server'

  export async function middleware(request: NextRequest) {
    let response = NextResponse.next({
      request: {
        headers: request.headers,
      },
    })

    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return request.cookies.get(name)?.value
          },
          set(name: string, value: string, options: CookieOptions) {
            request.cookies.set({
              name,
              value,
              ...options,
            })
            response = NextResponse.next({
              request: {
                headers: request.headers,
              },
            })
            response.cookies.set({
              name,
              value,
              ...options,
            })
          },
          remove(name: string, options: CookieOptions) {
            request.cookies.set({
              name,
              value: '',
              ...options,
            })
            response = NextResponse.next({
              request: {
                headers: request.headers,
              },
            })
            response.cookies.set({
              name,
              value: '',
              ...options,
            })
          },
        },
      }
    )

    // Refresh session if expired - required for Server Components
    // https://supabase.com/docs/guides/auth/ssr/nextjs#handling-session-with-middleware
    await supabase.auth.getUser()

    return response
  }

  export const config = {
    matcher: [
      /*
       * Match all request paths except for the ones starting with:
       * - _next/static (static files)
       * - _next/image (image optimization files)
       * - favicon.ico (favicon file)
       * Feel free to modify this pattern to include more paths.
       */
      '/((?!_next/static|_next/image|favicon.ico).*)',
    ],
  }
  ```

Con esta guía, tu editor AI tendrá un marco claro de cómo generar interacciones seguras, consistentes y alineadas con tu esquema y políticas de Supabase, utilizando UUIDs y las mejores prácticas de `@supabase/ssr` para Next.js.
